# Serializers

Serializers in our project play a crucial role in data validation and transformation. Each app maintains its own set of serializers, organized in the `serializers` folder. While the use of Django Restframework's `ModelSerializer` is common, engineers are encouraged to explore and utilize other serializer types based on project requirements. This section provides an overview of the serializer structure and includes sample examples to illustrate the serialization process.

## Serializer Structure

### File Organization

Serializers for a specific app are stored in the `apps/${appname}/serializers/` directory. Each serializer is defined in its own file, facilitating a modular and well-organized codebase.

```plaintext
.
├── apps
│   ├── app1
│   │   ├── __init__.py
│   │   ├── models
│   │   │   # (Similar structure as mentioned in the Models section)
│   │   ├── serializers
│   │   │   ├── __init__.py
│   │   │   ├── serializer1.py  # Example: Serializer for model1
│   │   │   └── serializer2.py  # Example: Serializer for model2
│   │   ├── urls.py
│   │   └── views
│   │       # (Similar structure as mentioned in the Views section)
│   ├── app2
│   │   # (Similar structure as app1)
│   └── app3
│       # (Similar structure as app1)
```

### Sample Serializer Definition

Consider an example where an app named `example` has a model named `Item`, and we need a serializer for this model. The serializer definition would be stored in `apps/example/serializers/item_serializer.py`:

```python
# apps/example/serializers/item_serializer.py

from rest_framework import serializers

class ItemSerializer(serializers.Serializer):
    """Serializer for the Item model."""

    field1 = serializers.CharField()
    field2 = serializers.IntegerField()
    field3 = serializers.BooleanField()
    created_at = serializers.DateTimeField()
    updated_at = serializers.DateTimeField()
```

In this example, the `ItemSerializer` is defined using the raw `serializers.Serializer` class. This approach offers flexibility when direct conversion to a model is not necessary, and the serializer can be used solely for validation.

### Additional Serializer Example for Login

For scenarios not directly related to models, such as login, engineers can use a raw serializer tailored for the specific use case. Below is an example of a `RawLoginSerializer` designed for a login scenario:

```python
# apps/example/serializers/raw_login_serializer.py

from rest_framework import serializers

class RawLoginSerializer(serializers.Serializer):
    """Raw Serializer for the Login scenario."""

    username = serializers.CharField()
    password = serializers.CharField(write_only=True)

    def validate(self, data):
        """
        Validate the input data for the login scenario.

        In a real-world scenario, you may want to perform authentication checks here,
        such as verifying the username and password against a user database.

        For simplicity, this example only checks if both username and password are provided.
        """
        username = data.get('username')
        password = data.get('password')

        if not username or not password:
            raise serializers.ValidationError("Both username and password are required for login.")

        # Additional authentication logic can be added here

        return data
```

In scenarios where a model-based serializer is necessary, a `ModelSerializer` can be used. Below is an example for the `Item` model:

```python
# apps/example/serializers/model_item_serializer.py

from rest_framework import serializers
from apps.example.models.item import Item

class ModelItemSerializer(serializers.ModelSerializer):
    """Model Serializer for the Item model."""

    class Meta:
        model = Item  # Update to the actual model name
        fields = ['field1', 'field2', 'field3', 'created_at', 'updated_at']  # Update to the actual field names
```

In this example, the `ModelItemSerializer` uses Django Restframework's `ModelSerializer` for convenient serialization of model data. Engineers can choose the serializer type that best fits the project's needs, and the provided structure allows for seamless integration of different serializer types while maintaining a modular and extensible design.

Note: Each serializer will be implemented in its own file in the directory `apps/<app_name>/serializers/`.