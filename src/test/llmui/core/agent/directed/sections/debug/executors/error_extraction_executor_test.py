import unittest

from llmui.core.agent.directed.sections.debug.executors.error_extraction_executor import ErrorExtractionExecutor
from llmui.di import LLMProviders


class ErrorExtractionExecutorTest(unittest.TestCase):

	def test_functionality(self):

		executor = ErrorExtractionExecutor(LLMProviders.provide_default_llm())
		errors = executor("""
⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯
 FAIL  src/tests/unit/apps/core/data/BlogPostRepositoryTest.spec.ts > BlogPost Repository Test > Get BlogPost Test
AxiosError: Request failed with status code 404
 ❯ settle node_modules/axios/lib/core/settle.js:19:12
 ❯ XMLHttpRequest.onloadend node_modules/axios/lib/adapters/xhr.js:111:7
 ❯ XMLHttpRequest.invokeTheCallbackFunction node_modules/jsdom/lib/jsdom/living/generated/EventHandlerNonNull.js:14:28
 ❯ XMLHttpRequest.<anonymous> node_modules/jsdom/lib/jsdom/living/helpers/create-event-accessor.js:35:32
 ❯ innerInvokeEventListeners node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25
 ❯ invokeEventListeners node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3
 ❯ XMLHttpRequestImpl._dispatch node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9
 ❯ fireAnEvent node_modules/jsdom/lib/jsdom/living/helpers/events.js:18:36
 ❯ Request.<anonymous> node_modules/jsdom/lib/jsdom/living/xhr/XMLHttpRequest-impl.js:891:5
 ❯ Request.emit node:events:549:35
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { code: 'ERR_BAD_REQUEST', config: { transitional: { silentJSONParsing: true, forcedJSONParsing: true, clarifyTimeoutError: false }, adapter: [ 'xhr', 'http' ], transformRequest: [ 'Function<transformRequest>' ], transformResponse: [ 'Function<transformResponse>' ], timeout: +0, xsrfCookieName: 'XSRF-TOKEN', xsrfHeaderName: 'X-XSRF-TOKEN', maxContentLength: -1, maxBodyLength: -1, env: { FormData: 'Function<FormData>', Blob: 'Function<Blob>' }, validateStatus: 'Function<validateStatus>', headers: { Accept: 'application/json, text/plain, */*', 'Content-Type': null, constructor: 'Function<AxiosHeaders>', set: 'Function<set>', get: 'Function<get>', has: 'Function<has>', delete: 'Function<delete>', clear: 'Function<clear>', normalize: 'Function<normalize>', concat: 'Function<concat>', toJSON: 'Function<toJSON>', toString: 'Function<toString>', getContentType: 'Function<value>', setContentType: 'Function<value>', hasContentType: 'Function<value>', getContentLength: 'Function<value>', setContentLength: 'Function<value>', hasContentLength: 'Function<value>', getAccept: 'Function<value>', setAccept: 'Function<value>', hasAccept: 'Function<value>', getAcceptEncoding: 'Function<value>', setAcceptEncoding: 'Function<value>', hasAcceptEncoding: 'Function<value>', getUserAgent: 'Function<value>', setUserAgent: 'Function<value>', hasUserAgent: 'Function<value>', getAuthorization: 'Function<value>', setAuthorization: 'Function<value>', hasAuthorization: 'Function<value>' }, baseURL: 'http://172.17.0.1:5000/', url: 'blog/undefined', method: 'get', data: undefined }, request: { constructor: 'Function<XMLHttpRequest>', open: 'Function<open>', setRequestHeader: 'Function<setRequestHeader>', send: 'Function<send>', abort: 'Function<abort>', getResponseHeader: 'Function<getResponseHeader>', getAllResponseHeaders: 'Function<getAllResponseHeaders>', overrideMimeType: 'Function<overrideMimeType>', onreadystatechange: null, readyState: 4, timeout: +0, withCredentials: false, upload: { constructor: 'Function<XMLHttpRequestUpload>', onloadstart: null, onprogress: null, onabort: null, onerror: null, onload: null, ontimeout: null, onloadend: null, addEventListener: 'Function<addEventListener>', removeEventListener: 'Function<removeEventListener>', dispatchEvent: 'Function<dispatchEvent>' }, responseURL: 'http://172.17.0.1:5000/blog/undefined', status: 404, statusText: 'NOT FOUND', responseType: '', response: '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n', responseText: '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n', responseXML: null, UNSENT: +0, OPENED: 1, HEADERS_RECEIVED: 2, LOADING: 3, DONE: 4, onloadstart: null, onprogress: null, onabort: 'Function<handleAbort>', onerror: 'Function<handleError>', onload: null, ontimeout: 'Function<handleTimeout>', onloadend: 'Function<onloadend>', addEventListener: 'Function<addEventListener>', removeEventListener: 'Function<removeEventListener>', dispatchEvent: 'Function<dispatchEvent>' }, response: { data: '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n', status: 404, statusText: 'NOT FOUND', headers: { 'content-type': 'text/html; charset=utf-8', 'content-length': '207', constructor: 'Function<AxiosHeaders>', set: 'Function<set>', get: 'Function<get>', has: 'Function<has>', delete: 'Function<delete>', clear: 'Function<clear>', normalize: 'Function<normalize>', concat: 'Function<concat>', toJSON: 'Function<toJSON>', toString: 'Function<toString>', getContentType: 'Function<value>', setContentType: 'Function<value>', hasContentType: 'Function<value>', getContentLength: 'Function<value>', setContentLength: 'Function<value>', hasContentLength: 'Function<value>', getAccept: 'Function<value>', setAccept: 'Function<value>', hasAccept: 'Function<value>', getAcceptEncoding: 'Function<value>', setAcceptEncoding: 'Function<value>', hasAcceptEncoding: 'Function<value>', getUserAgent: 'Function<value>', setUserAgent: 'Function<value>', hasUserAgent: 'Function<value>', getAuthorization: 'Function<value>', setAuthorization: 'Function<value>', hasAuthorization: 'Function<value>' }, config: { transitional: { silentJSONParsing: true, forcedJSONParsing: true, clarifyTimeoutError: false }, adapter: [ 'xhr', 'http' ], transformRequest: [ 'Function<transformRequest>' ], transformResponse: [ 'Function<transformResponse>' ], timeout: +0, xsrfCookieName: 'XSRF-TOKEN', xsrfHeaderName: 'X-XSRF-TOKEN', maxContentLength: -1, maxBodyLength: -1, env: { FormData: 'Function<FormData>', Blob: 'Function<Blob>' }, validateStatus: 'Function<validateStatus>', headers: { Accept: 'application/json, text/plain, */*', 'Content-Type': null, constructor: 'Function<AxiosHeaders>', set: 'Function<set>', get: 'Function<get>', has: 'Function<has>', delete: 'Function<delete>', clear: 'Function<clear>', normalize: 'Function<normalize>', concat: 'Function<concat>', toJSON: 'Function<toJSON>', toString: 'Function<toString>', getContentType: 'Function<value>', setContentType: 'Function<value>', hasContentType: 'Function<value>', getContentLength: 'Function<value>', setContentLength: 'Function<value>', hasContentLength: 'Function<value>', getAccept: 'Function<value>', setAccept: 'Function<value>', hasAccept: 'Function<value>', getAcceptEncoding: 'Function<value>', setAcceptEncoding: 'Function<value>', hasAcceptEncoding: 'Function<value>', getUserAgent: 'Function<value>', setUserAgent: 'Function<value>', hasUserAgent: 'Function<value>', getAuthorization: 'Function<value>', setAuthorization: 'Function<value>', hasAuthorization: 'Function<value>' }, baseURL: 'http://172.17.0.1:5000/', url: 'blog/undefined', method: 'get', data: undefined }, request: { constructor: 'Function<XMLHttpRequest>', open: 'Function<open>', setRequestHeader: 'Function<setRequestHeader>', send: 'Function<send>', abort: 'Function<abort>', getResponseHeader: 'Function<getResponseHeader>', getAllResponseHeaders: 'Function<getAllResponseHeaders>', overrideMimeType: 'Function<overrideMimeType>', onreadystatechange: null, readyState: 4, timeout: +0, withCredentials: false, upload: { constructor: 'Function<XMLHttpRequestUpload>', onloadstart: null, onprogress: null, onabort: null, onerror: null, onload: null, ontimeout: null, onloadend: null, addEventListener: 'Function<addEventListener>', removeEventListener: 'Function<removeEventListener>', dispatchEvent: 'Function<dispatchEvent>' }, responseURL: 'http://172.17.0.1:5000/blog/undefined', status: 404, statusText: 'NOT FOUND', responseType: '', response: '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n', responseText: '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n', responseXML: null, UNSENT: +0, OPENED: 1, HEADERS_RECEIVED: 2, LOADING: 3, DONE: 4, onloadstart: null, onprogress: null, onabort: 'Function<handleAbort>', onerror: 'Function<handleError>', onload: null, ontimeout: 'Function<handleTimeout>', onloadend: 'Function<onloadend>', addEventListener: 'Function<addEventListener>', removeEventListener: 'Function<removeEventListener>', dispatchEvent: 'Function<dispatchEvent>' } }, toJSON: 'Function<toJSON>', isAxiosError: true }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯
""")
		self.assertNotNone(errors)

